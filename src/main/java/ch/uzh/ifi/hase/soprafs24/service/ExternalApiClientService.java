package ch.uzh.ifi.hase.soprafs24.service;

import ch.uzh.ifi.hase.soprafs24.model.CardResponse;
import ch.uzh.ifi.hase.soprafs24.model.DrawCardResponse;
import ch.uzh.ifi.hase.soprafs24.model.NewDeckResponse;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;

import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Service;
import org.springframework.web.reactive.function.client.WebClient;
import reactor.core.publisher.Mono;

@Service
public class ExternalApiClientService {
    private final WebClient externalApiClient;

    public ExternalApiClientService(@Qualifier("externalApiClient") WebClient externalApiClient) {
        this.externalApiClient = externalApiClient;
    }

    public static final String SEED_PREFIX = "seed--";

    /**
     * Gets the information generated by the deck of cards API (e.g. deck_id,
     * success, etc.).
     * 
     * @return The information given by the deck of cards API.
     */
    public Mono<NewDeckResponse> createNewDeck() {
        return externalApiClient.get()
                .uri("/new/shuffle/?deck_count=1")
                .retrieve()
                .bodyToMono(NewDeckResponse.class);
    }

    /**
     * Draws the given amount of cards from a deck with the given deck id.
     * 
     * @param deckId     The id of the deck from which to draw the cards.
     * @param cardAmount The amount of cards to be drawn.
     * @return The drawn cards.
     */
    public Mono<DrawCardResponse> drawCard(String deckId, int cardAmount) {
        return externalApiClient.get()
                .uri("/" + deckId + "/draw/?count=" + cardAmount)
                .retrieve()
                .bodyToMono(DrawCardResponse.class);
    }

    /**
     * Draws the given amount of cards from a deck with the given deck id.
     * 
     * @param seedString The seed marked with prefix.
     * @return The Long it encodes.
     */
    public static Long extractSeedNumber(String seedString) {
        if (seedString != null && seedString.startsWith(SEED_PREFIX)) {
            String numberPart = seedString.substring(SEED_PREFIX.length());
            return Long.parseLong(numberPart);
        }
        throw new IllegalArgumentException("Invalid seed format: " + seedString);
    }

    /**
     * Prepare seed Long for storage in DB.
     * 
     * @param seed The seed as a Long.
     * @return Prefixed version as String for DB use.
     */
    public static String buildSeedString(Long seed) {
        return SEED_PREFIX + seed;
    }

    /**
     * Assess whether the given string might be a seedString.
     * 
     * @param seedStringCandidate
     * @return Boolean
     */
    public static boolean isSeedString(String seedStringCandidate) {
        if (seedStringCandidate == null || !seedStringCandidate.startsWith(SEED_PREFIX)) {
            return false;
        }
        String numberPart = seedStringCandidate.substring(SEED_PREFIX.length());
        try {
            Long.parseLong(numberPart);
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }

    /**
     * 
     */
    public static List<CardResponse> generateDeterministicDeck(int deckSize, Long seed) {
        List<CardResponse> deck = new ArrayList<>();
        String[] suits = { "C", "D", "H", "S" };
        String[] ranks = { "2", "3", "4", "5", "6", "7", "8", "9", "0", "J", "Q", "K", "A" };

        for (String suit : suits) {
            for (String rank : ranks) {
                CardResponse card = new CardResponse();
                card.setCode(rank + suit); // e.g., "2C"
                deck.add(card);
            }
        }

        Random rng = new Random(seed);
        for (int i = deckSize - 1; i > 0; i--) {
            int j = rng.nextInt(i + 1);
            CardResponse temp = deck.get(i);
            deck.set(i, deck.get(j));
            deck.set(j, temp);
        }

        return deck;
    }
}
